import asyncio
import csv
import datetime
import json
import os

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN, ADMIN_ID, ADMIN_USERNAME

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
CATALOG_FILE = "catalog.json"

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æüòû"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥")]
    ],
    resize_keyboard=True
)

user_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä?")],
        [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è")]
    ],
    resize_keyboard=True
)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
class ProductState(StatesGroup):
    waiting_for_name = State()
    waiting_for_number = State()
    waiting_for_status_update = State()


def load_catalog():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    try:
        with open(CATALOG_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    except FileNotFoundError:
        return []


def save_catalog(catalog):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –≤ —Ñ–∞–π–ª.
    """
    with open(CATALOG_FILE, "w", encoding="utf-8") as file:
        json.dump(catalog, file, ensure_ascii=False, indent=4)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
catalog = load_catalog()


def update_client(id_tg, username):
    fieldnames = ['ID', 'ID_TG', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥']
    clients = []
    client_exists = False
    current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    max_id = 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if os.path.exists("clients.csv"):
        with open("clients.csv", mode='r', encoding='utf-8', newline='') as file:
            reader = csv.DictReader(file)
            for row in reader:
                # –û–±–Ω–æ–≤–ª—è–µ–º max_id
                try:
                    row_id = int(row['ID'])
                    if row_id > max_id:
                        max_id = row_id
                except ValueError:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ID

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º ID_TG
                if row['ID_TG'] == str(id_tg):
                    row['–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥'] = current_time
                    client_exists = True
                    print(f"–ö–ª–∏–µ–Ω—Ç —Å ID_TG={id_tg} –æ–±–Ω–æ–≤–ª–µ–Ω.")
                clients.append(row)
    else:
        print(f"–§–∞–π–ª client.csv –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")

    if not client_exists:
        new_id = max_id + 1
        new_client = {
            'ID': str(new_id),
            'ID_TG': str(id_tg),
            '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': username,
            '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω': current_time,
            '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥': current_time
        }
        clients.append(new_client)
        print(f"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å ID_TG={id_tg} –¥–æ–±–∞–≤–ª–µ–Ω.")

    # –ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ –≤ CSV
    with open("clients.csv", mode='w', encoding='utf-8', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(clients)


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """

    if message.from_user.id == ADMIN_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ú–∞—Ç–≤–µ–π! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=admin_kb)
    else:
        update_client(message.from_user.id, message.from_user.username)
        await message.answer('''–ü—Ä–∏–≤–µ—Ç!üëã
–í —ç—Ç–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ:
‚Äî–£–∑–Ω–∞—Ç—å, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Äüïò
‚Äî–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ç–∞–ª–æ–≥–æ–ºüìÉ
‚Äî–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–ºüì°''', reply_markup=user_kb)


@dp.message(lambda message: message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"])
async def status_update(message: types.Message, state: FSMContext):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ú–∞—Ç–≤–µ—è.
    """
    global status
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å!")
        await state.set_state(ProductState.waiting_for_status_update)
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ú–∞—Ç–≤–µ—è.")


@dp.message(ProductState.waiting_for_status_update)
async def status_update(message: types.Message, state: FSMContext):
    global status
    if message.text == '–ù':
        status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æüòû"
    elif message.text == '–°':
        status = "–°–µ–π—á–∞—Åüî•"
    else:
        status = message.text
    await message.answer(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ \"{status}\"!")


@dp.message(lambda message: message.text == "–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä?")
async def get_status(message: types.Message):
    """
    –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    global status
    await message.answer(status)


@dp.message(lambda message: message.text == "–°–≤—è–∑–∞—Ç—å—Å—è")
async def contact_admin(message: types.Message):
    """
    –í—ã–¥–∞—á–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram-–∞–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    contact_link = f"https://t.me/{ADMIN_USERNAME}"
    await message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ú–∞—Ç–≤–µ–µ–º –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: {contact_link}")


@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product(message: types.Message, state: FSMContext):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
    """
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥.")
        await state.set_state(ProductState.waiting_for_name)
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@dp.message(ProductState.waiting_for_name)
async def add_product_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    catalog.append(message.text)
    save_catalog(catalog)
    await message.answer(f"–¢–æ–≤–∞—Ä \"{message.text}\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥.", reply_markup=admin_kb)
    await state.clear()


@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def remove_product(message: types.Message, state: FSMContext):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
    """
    if message.from_user.id == ADMIN_ID:
        if not catalog:
            await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        else:
            catalog_list = "\n".join([f"{i + 1}. {item}" for i, item in enumerate(catalog)])
            await message.answer(f"–ö–∞—Ç–∞–ª–æ–≥:\n{catalog_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
            await state.set_state(ProductState.waiting_for_number)
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@dp.message(ProductState.waiting_for_number)
async def remove_product_by_number(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    try:
        index = int(message.text) - 1
        if 0 <= index < len(catalog):
            removed_item = catalog.pop(index)
            save_catalog(catalog)
            await message.answer(f"–¢–æ–≤–∞—Ä \"{removed_item}\" —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞.", reply_markup=admin_kb)
        else:
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä.")
    await state.clear()


@dp.message(lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥")
async def view_catalog_admin(message: types.Message):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).
    """
    if catalog:
        catalog_list = "\n".join([f"{i + 1}. {item}" for i, item in enumerate(catalog)])
        await message.answer(f"–ö–∞—Ç–∞–ª–æ–≥:\n{catalog_list}")
    else:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")


@dp.message(lambda message: message.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def view_catalog_user(message: types.Message):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å).
    """
    update_client(message.from_user.id, message.from_user.username)
    if catalog:
        catalog_list = "\n".join([f"{i + 1}. {item}" for i, item in enumerate(catalog)])
        await message.answer(f"–ö–∞—Ç–∞–ª–æ–≥:\n{catalog_list}")
    else:
        await message.answer("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")


@dp.message()
async def fallback(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=admin_kb)
    else:
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –≥–¥–µ –ú–∞—Ç–≤–µ–π, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º.",
                             reply_markup=user_kb)


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
